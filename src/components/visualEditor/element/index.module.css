.element {
	--bottom-padding-color: var(--element-border-padding);
	--left-padding-color: var(--element-border-padding);
	--right-padding-color: var(--element-border-padding);
	--top-padding-color: var(--element-border-padding);
	--padding-opacity: var(--element-background-opacity);
}

.paddingBottomGlobal {
	--bottom-padding-color: var(--element-border-default-padding);
}

.paddingLeftGlobal {
	--left-padding-color: var(--element-border-default-padding);
}

.paddingRightGlobal {
	--right-padding-color: var(--element-border-default-padding);
}

.paddingTopGlobal {
	--top-padding-color: var(--element-border-default-padding);
}

.element {
	border: var(--element-border-padding) var(--element-border-width) solid;
	border-bottom-color: var(--bottom-padding-color);
	border-left-color: var(--left-padding-color);
	border-right-color: var(--right-padding-color);
	border-top-color: var(--top-padding-color);
	position: absolute;
	display: block;
	touch-action: none;
}

.element .paddingBackgrounds,
.element .paddingBackgrounds div {
	width: 100%;
	height: 100%;
	position: absolute;
}

.element:hover,
.element.hover {
	--padding-opacity: var(--element-background-opacity-hover);
}

.paddingBackgrounds .paddingBottom {
	background-color: color-mix(
		in srgb,
		var(--bottom-padding-color) var(--padding-opacity),
		transparent
	);
	clip-path: polygon(0% 100%, 50% 50%, 100% 100%);
}

.paddingBackgrounds .paddingLeft {
	background-color: color-mix(
		in srgb,
		var(--left-padding-color) var(--padding-opacity),
		transparent
	);
	clip-path: polygon(0% 0%, 50% 50%, 0% 100%);
}

.paddingBackgrounds .paddingRight {
	background-color: color-mix(
		in srgb,
		var(--right-padding-color) var(--padding-opacity),
		transparent
	);
	clip-path: polygon(100% 0%, 50% 50%, 100% 100%);
}

.paddingBackgrounds .paddingTop {
	background-color: color-mix(
		in srgb,
		var(--top-padding-color) var(--padding-opacity),
		transparent
	);
	clip-path: polygon(0% 0%, 50% 50%, 100% 0%);
}

.element.hidden {
	visibility: hidden;
}

.inner {
	border: var(--element-border) var(--element-border-width) solid;
	background-color: color-mix(
		in srgb,
		var(--element-border) var(--element-background-opacity),
		transparent
	);
}

.element:hover .inner,
.element.hover .inner {
	background-color: color-mix(
		in srgb,
		var(--element-border) var(--element-background-opacity-hover),
		transparent
	);
}

.padding {
	height: 100%;
	width: 100%;
	position: absolute;
	display: block;
	pointer-events: none;
}

.element.hover,
.element.active,
.element:hover,
.element.hover .inner,
.element.active .inner,
.element:hover .inner {
	border: var(--select-rgb) var(--element-border-width) dashed;
}

.element.active,
.element.active .inner {
	border: var(--select-rgb-active) var(--element-border-width) dashed;
}

.element .inputsDescription {
	color: var(--element-description-rgb);
	text-align: center;
}

.element .inputsDescription.emptyImage {
	color: var(--element-description-rgb-emptyImage);
}

.padStickOverlay {
	width: calc(100% + var(--element-border-width));
	height: calc(100% + var(--element-border-width));
	left: calc(var(--element-border-width) / -2);
	top: calc(var(--element-border-width) / -2);
	display: grid;
	position: absolute;
	grid-template-columns: 1fr 1fr 1fr;
	grid-template-rows: 1fr 1fr 1fr;
}

.padStickOverlay > div {
	border: calc(var(--element-border-width) / 2) solid var(--pad-stick-overlay);
}

.thumbstickImage:not(.hidden) {
	visibility: initial;
}

.thumbstickImage.hidden {
	visibility: hidden;
}

.thumbstickImage,
.labelDiv {
	width: 100%;
	height: 100%;
	display: flex;
	position: absolute;
	justify-content: center;
	align-items: center;
}

.thumbstickImageEmpty > div {
	background-color: color-mix(
		in srgb,
		var(--thumbstick-image) var(--thumbstick-image-opacity),
		transparent
	);
}

.expandGrid {
	width: calc(
		100% + var(--resize-handle-width) + 2 * var(--element-border-width)
	);
	height: calc(
		100% + var(--resize-handle-width) + 2 * var(--element-border-width)
	);
	top: calc(
		(var(--resize-handle-width) / 2 + var(--element-border-width)) * -1
	);
	left: calc(
		(var(--resize-handle-width) / 2 + var(--element-border-width)) * -1
	);
	display: grid;
	grid-template-columns: var(--resize-handle-width) 1fr var(
			--resize-handle-width
		);
	grid-template-rows: var(--resize-handle-width) 1fr var(
			--resize-handle-width
		);
	position: absolute;
}

.expandGrid > div {
	pointer-events: auto;
	touch-action: none;
}
